=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=
CIS 120 Game Project Proposal
PennKey: __yumingq_____
Name of TA you consulted with: ____Joyce______
=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=

===============
=: Your Game :=
===============

- What game are you planning to implement? If it is a game of your own design,
  or not especially well-known, provide a 2-3 sentence description of the game.
  
    I want to create a game called Farmpocalypse- somewhat reminiscent of Farmville (requires time
    to grow plants) but much more fast-paced, and with zombies chasing you. Essentially there
    will be plots of land where you can choose what plants to grow, and they will have a time
    of a few seconds to grow and then a few seconds to rot. You have to try to grow and harvest
    as many as you can while avoiding "zombies" that chase you around (increasing zombies
    with increased time in-game). 

- What classes and interfaces do you plan to create? How will the different
  components of your game (the model, the GUI, etc.) interact?
  
    Abstract Class: Plant (attributes like time to full growth, time to rot, cost to buy, profit
    from harvest, state of growing, full grown, or rotting, which plot it is in)
    Class: Different types of plant (i.e. Strawberry, Pumpkin, Corn) that specify the
    requirements of the Plant interface.
    Class: Zombie (creation of a zombie to chase farmer- may create different types of zombies
    if time allows, which would need an interface Zombie and then classes of different zombies)
    location, movement speed/movement (autonomous, paused when farmer is at plant
    selection), visual appearance.
    Class: Farmer- location, movement based off of keyboard, "plant" command, "harvest" command,
    visual appearance
    Class: Plot- empty, occupied, location, visual appearance
    Model: Adds zombies based off of time in-game, updates plants in each plot if the farmer
    plants one or harvests one or removes a rotting one, restart the game, keep track of score, 
    update high score board, show instructions if button is clicked, quit game. 
    GUI: Instructions button, start/restart button, quit button, screen for showing the game
    
    I also need some way of displaying timers above each plot.

- What do you think will be the most challenging thing to implement?

    It might be ensuring that the plants work properly and respond to actions as well as changes
    in state. I would also need the farmer to be in a certain range of the plot for them to plant
    in that plot to make zombie-chasing more effective.


====================
=: Core Concept 1 :=
====================

Concept 1: ___File I/O____

- What specific feature of your game will be implemented using this concept?

    I want to keep a high score sheet with username and scores. The user should be able
    to add their name and score at the end of a game, and see the list of previous
    high scores.

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
    We need to save high scores to a separate file from the files local to a single game
    because scores persist across all plays, and we need to read it in for each game
    to display at the end.

====================
=: Core Concept 2 :=
====================

Concept 2: ___Inheritance/Subtyping____

- What specific feature of your game will be implemented using this concept?

    I want to use inheritance to model the different crops to grow.

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
    All plants are used in similar ways and have certain properties- time to full growth,
    time to rot, state of growing, full grown, or rotting, cost to buy, profit from harvest, and
    visual appearance. However, they each have different values for each of these properties,
    so it makes sense to have an abstract class "Plant" and then have different classes for each
    plant. It may also make sense to use something like GameObj for the moving parts of the
    game, the farmer and zombie(s), as they are very different objects but have some 
    fundamental similarities when it comes to movement and positioning.

====================
=: Core Concept 3 :=
====================

Concept 3: ___Testable Component____

- What specific feature of your game will be implemented using this concept?

    The functioning of plants will be tested.

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
    Plants in-game have a lot of different methods attached to them, and are central to
    the success of the player. I need to make sure that the state of the plant is updated
    correctly, that the timers work properly, and whether or not the zombies are actually
    chasing the farmer, etc. Because of these complexities I should create some modular tests.
    
====================
=: Core Concept 4 :=
====================

Concept 4: ___Data Structure- 2D Arrays(if enough time- maps)____

- What specific feature of your game will be implemented using this concept?

    I need to keep track of plots in some manner. Plots are unique, identified by their location,
    and keep track of the Plant they contain as the value. 

- Why does it make sense to implement this feature with this concept? Justify
  why this is a non-trivial application of the concept in question.
  
    It makes sense for a 2D array to be used because plants have to be associated with the plot 
    they are growing in for the basis of the game to work- farmers should be able to walk around 
    to the different plots and then change the associated plant through their interactions
    with it. Arrays inherently have a label for positioning so they can keep track of the fixed
    plots. A more complex implementation that I would consider trying out if I have enough time
    is the ability to plant anywhere on the screen, in which case maps might make more sense to
    create an almost infinite number of potential plots.

